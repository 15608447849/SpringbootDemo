import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'org.springframework.boot' version '3.5.3' apply false
    id 'io.spring.dependency-management' version '1.1.7' apply false
}





allprojects {
    repositories {
        maven{ url = 'https://maven.aliyun.com/repository/public'}
        maven{ url = 'https://maven.aliyun.com/repository/central'}
        maven{ url = 'https://maven.aliyun.com/repository/google'}
        maven{ url = 'https://maven.aliyun.com/repository/apache-snapshots'}
        maven { url = "https://jitpack.io" }
        mavenCentral()
        google()
    }
}



subprojects { sub ->
    // 内置
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'groovy'


    group = 'com.demo'
    version = '0.0.1-SNAPSHOT'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }


    compileJava {
        [compileJava]*.options*.encoding = 'UTF-8'
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).configureEach {
            options.compilerArgs << "-Xlint:-deprecation"
        }
    }

    tasks.withType(Javadoc).configureEach {
        failOnError = false
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
        options.addStringOption('-Xlint', 'unchecked')
        options.addStringOption('-Xlint', 'deprecation')
        options.addStringOption('deprecation', 'true')

    }

    tasks.register('sourcesJar', Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    tasks.register('javadocJar', Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    configurations {
        configureEach {
            // 依赖缓存时效
            resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        }
    }

    configurations.configureEach {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }


    if (sub.name == 'mydep') {
        return
    }

    // spring boot 部分

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'


    // bom版本查询: https://spring.io/projects/spring-cloud-alibaba https://sca.aliyun.com/docs/2023/overview/version-explain/
    dependencyManagement {
        imports {
            mavenBom(SpringBootPlugin.BOM_COORDINATES)

//            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2024.0.0"
//            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:2024.0.0.0"

            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2025.0.0'
            mavenBom 'com.alibaba.cloud:spring-cloud-alibaba-dependencies:2023.0.1.3'

        }
    }



    dependencies {
        // boot核心
        implementation('org.springframework.boot:spring-boot-starter') {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
        // 使用log4j2
        implementation 'org.springframework.boot:spring-boot-starter-log4j2'
        // web容器
        implementation 'org.springframework.boot:spring-boot-starter-web'
        // aop切面
        implementation 'org.springframework.boot:spring-boot-starter-aop'
        // 测试类
        testImplementation 'org.springframework.boot:spring-boot-starter-test'



        implementation 'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'
    }


    bootJar {
        zip64 = true
        version = new Date().format("yyyyMMddHHmmssSSS")

        def archiveFileName = bootJar.archiveFileName.get()
        def jar = file("${layout.buildDirectory.asFile.get()}/libs/${archiveFileName}")
        def storage = file("${project.rootDir}/${COMPLETE_JAR_DIR}/${archiveFileName}")
        def subBuildDir = project.rootProject.subprojects
        doLast {
            copy {
                println("✅ 打包完成: ${archiveFileName} \t时间: ${new Date().format("yyyy-MM-dd HH:mm:ss:SSS")}")
                from jar
                into storage.parent
                println("✅ 完成复制: ${archiveFileName} \t 大小: ${jar.length()}b \n原位置: ${jar}\n移动到: ${storage}")
            }
        }.doLast {
            subBuildDir.each { subProject ->
                def buildDir = file("${subProject.projectDir}/build")
                println "✅ 已清理模块 build 目录: ${buildDir} delete = ${delete buildDir}"
            }
        }
    }
}




