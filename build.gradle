
// 应用插件
plugins {
    id 'java'
    id 'java-library'
    id 'groovy'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}



subprojects {

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'


    repositories {
        maven{ url 'https://maven.aliyun.com/repository/central'}
        maven{ url 'https://maven.aliyun.com/repository/public'}
        maven{ url 'https://maven.aliyun.com/repository/google'}
        maven{ url 'https://maven.aliyun.com/repository/apache-snapshots'}
        maven { url "https://jitpack.io" }
        mavenCentral()
        google()

    }


    group = 'com.demo'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    compileJava {
        [compileJava]*.options*.encoding = 'UTF-8'
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    tasks.withType(Javadoc).configureEach {
        failOnError false
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
        options.addStringOption('-Xlint', 'unchecked')
        options.addStringOption('-Xlint', 'deprecation')
        options.addStringOption('deprecation', 'true')

    }

    tasks.register('sourcesJar', Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    tasks.register('javadocJar', Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    configurations {
        configureEach {
            // 依赖缓存时效
            resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        }
    }

    configurations.configureEach {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }

    dependencies  {
        implementation 'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'

        implementation 'org.springframework.boot:spring-boot-starter-aop'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation ('org.springframework.boot:spring-boot-starter') {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
        implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    }


    bootJar.zip64=true
    bootJar.doLast{
        copy {
            File jar = file(layout.buildDirectory +"/libs/${archiveFileName}")
            File storage = file(SHODOW_COMPLETE_JAR_DIR+"/${archiveFileName}")
            from jar
            into storage.parent
            println("打包: ${archiveFileName} \t时间: ${new Date().format("yyyyMMdd HH:mm:ss:SSS")} \t大小: ${jar.length()} byte" +
                    "\n原位置: ${jar}\n移动到: ${  storage }")
        }.with {
            def result = providers.exec {
                executable '../gradlew.bat'
                args 'clean'
            }
            println("******** 已清理模块 ********")
        }
    }

}

